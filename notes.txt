##################################################################
too build the and package the app spring boot plugin should be added to maven or gradle

run with gradle -> $ ./gradlew bootRun
build with gradle -> $ ./gradlew build

run with maven -> ./mvnw spring-boot:run
build with maven -> ./mvnw clean package
##################################################################
To resolve a dependency when it is added to maven run
$ ./mvnw dependency:resolve
##################################################################
JAVA BEANS:
in order for the JVM to be able reconstruct an instance of a class from its serialzied value anywhere else or maybe later 
in another machine. that class should follow 3 standards. 
1- no public properties only private ones with getters and setters
2- have a public no argument constructor
3- be serializable 

the classes that follow these 3 standards are called java beans

spring boot's @Bean annotation indicates that the following method returns a bean object or the class is a bean
##################################################################
what is the parent tag in pom.xml file ?
we can point out a parent pom.xml file for the current pom.xml file. Doing so, dependencies, properties,
constants and many more defined at the parent pom.xml file also get merged with the current pom.xml (child pom.xml) file.
Say you have a parent tag in your projects pom.xml that looks like below:

<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.1.8.RELEASE</version>
</parent>

Then maven reads that parent POM from your local repository (or from repository managers like sonatype, jfrog, etc that
you have configured) and creates a Resultant POM by combining the parent POM and your module’s POM.

To see the combined result use the following mvn command:
$ mvn help:effective-pom  
##################################################################
spring boot maven plugin is not necessary to run the application but to package and build the app it into a jar file it is needed 
##################################################################
Starters are a set of convenient dependency descriptors that you can include in your application.
You get a one-stop shop for all the Spring and related technologies that you need without having to hunt through 
sample code and copy-paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA 
for database access, include the spring-boot-starter-data-jpa dependency in your project.

The starters contain a lot of the dependencies that you need to get a project up and running quickly and with a consistent,
supported set of managed transitive dependencies.

All official starters follow a similar naming pattern; spring-boot-starter-*
##################################################################
Spring Boot auto-configuration attempts to automatically configure your Spring application based on the jar dependencies that you have added
##################################################################
If you need to find out what auto-configuration is currently being applied, and why, start your application with the --debug switch.
 Doing so enables debug logs for a selection of core loggers and logs a conditions report to the console
##################################################################
@ComponentScan scans for Spring components
@EnableAutoConfiguration is used for auto-configuring beans present in the classpath in Spring Boot application
##################################################################
Developer tools are automatically disabled when running a fully packaged application. If your application is launched
from java -jar or if it is started from a special classloader, then it is considered a “production application”.
You can control this behavior by using the spring.devtools.restart.enabled system property. To enable devtools, irrespective of
the classloader used to launch your application, set the -Dspring.devtools.restart.enabled=true system property. 
This must not be done in a production environment where running devtools is a security risk. To disable devtools, exclude the dependency
or set the -Dspring.devtools.restart.enabled=false system property.
NOTE: Flagging the dependency as optional in Maven or using the developmentOnly configuration in Gradle (as shown above) prevents devtools 
from being transitively applied to other modules that use your project.
##################################################################
spring devtools library applies default development options to make development easier like disabling browser caching by default.
all these dedfaults can be changed in application.properties.
also note that devtools library adds default application properties values for other projects as well
---
If you do not want property defaults to be applied you can set spring.devtools.add-properties to false in your application.properties.
For a complete list of the properties that are applied by the devtools, see 
https://github.com/spring-projects/spring-boot/tree/v2.6.1/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java
##################################################################
NOTE: there is not need for restarting the project (auto or not) for certain resources, static assets and templates
##################################################################
The restart technology provided by Spring Boot works by using two classloaders. Classes that do not change (for example, those from third-party jars)
 are loaded into a base classloader. Classes that you are actively developing are loaded into a restart classloader. When the application is restarted,
  the restart classloader is thrown away and a new one is created. This approach means that application restarts are typically much faster than “cold starts”, 
  since the base classloader is already available and populated.
SpringBoot Auto Reload only watches the class loader for classes we are developing not the libraries. if we add a library we need to Restart the application
this is the main reason why reload is faster than restart. since each reload only replaces the restart class loader
##################################################################

##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################